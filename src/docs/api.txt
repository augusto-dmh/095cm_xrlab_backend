HOW TO SET THE API:

/**
 * Step 1: Clone the repository located at https://github.com/augusto-dmh/conexao095_xrlab_backend.
 */

/**
 * Step 2: Create a MYSQL database for development.
 *
 * Execute 'create_db_dev' bash script located in the src/database/scripts directory.
 * The script will handle the creation of the MYSQL database required for development purposes - already with mock data.
 */

/**
 * Step 2: Run "npm install" to install the project dependencies.
 */

/**
 * 3 - Change the name of '.env.example' to '.env' at the root of the application.
 * Change the values of the variables in the file according to the following description of each key:
 *
 * - NODE_ENV The environment in which the application is running (development or production).

 * - DATABASE: The name of the database to connect to. (e.g., conexao095_dev - the db created with 'create_db_dev' uses this name)
 * - DATABASE_HOST: The IP address or hostname where the database is hosted. (e.g., 127.0.0.1)
 * - DATABASE_PORT: The port number on which the database is listening. (e.g., 3306)
 * - DATABASE_USERNAME: The username to be used for database authentication. (e.g., root)
 * - DATABASE_PASSWORD: The password to be used for database authentication. (e.g., kaksjdajskdsakldj)

 * - TOKEN_SECRET: A random and strong character sequence used for token generation and verification. (e.g., &ds7a89duj9jdsads8790ad&AD
 * - TOKEN_EXPIRATION: The duration for which the authentication token remains valid (e.g., 7d, 1y, 1h).

 * - APP_URL: The URL where the application is accessible on the web. (e.g., http://localhost:3000)
 * - APP_PORT: The port number on which the application listens for incoming requests. (e.g., 3000)
 */

/**
  Step 4: Add the frontend URL to the whitelist array in the app.js file.

 * In the file api/src/app.js, add the URL of the frontend where the application is hosted to the whitelist array.
 * This allows requests from the specified frontend URL to access the backend API.
 */

/**
 * Step 5: Run 'npm run dev' at the root of the project.
 *
 * This command is used to start the development server for the project.
 * It runs the 'dev' script defined in the package.json file, which
 * starts a local server and watches for changes in the code.
 */

================================================================================================================================================================



ENDPOINTS:

* HTTP METHOD [path]
- motivo de existir
?- exige ou não autenticação ('Authorization' header com token jwt válido em formato 'Bearer [token]')
?- dados que devem (ex: nickname) ou podem (ex: ?isAdmin) estar no body (se for necessário um body) e se é multipart/form-data
?- query params que podem ser usados (ex: filter[]=photos,avatars. obs: nesse caso tanto photos quanto avatars são opcionais)
- exemplo de retorno


-- photos

* GET /photos
- carregar todas as fotos da aplicação
- [
	{
		"url": "http://localhost:3000/images/1cb9b124-c76e-4095-a444-cd1bba2539a9.png",
		"id": 1,
		"filename": "1cb9b124-c76e-4095-a444-cd1bba2539a9.png",
		"latitude": 1,
		"longitude": 51.3,
		"userId": 14
	},
	{
		"url": "http://localhost:3000/images/dca39b3b-190a-4c3d-aed7-46e5e21e4b31.png",
		"id": 2,
		"filename": "dca39b3b-190a-4c3d-aed7-46e5e21e4b31.png",
		"latitude": 1,
		"longitude": 51.3,
		"userId": 14
	}, ...
]

* POST /photos
- upload de photos
- autenticação necessária
- latitude (number between -90 and 90), longitude (number between -180 and 180), photo (.png or .jpg, max size 5MB). multipart/form-data
- {
	"id": 51,
	"nickname": "augusto",
	"isAdmin": false,
	"selectedAvatarId": "1",
	"password": "$2a$10$ytNx79zq05c7G35rX6l/n.otw9gxE5VloWfApyWF.bnahKf9ksT.G",
	"xp": "100",
	"updatedAt": "2024-05-18T02:54:05.239Z",
	"createdAt": "2024-05-18T02:54:05.239Z"
}


-- users

* GET /users
- carregar todos os usuários da aplicação
- pode receber como query params 'filter[]=photos,avatars' para incluir as fotos e avatares dos usuários
- [
	{
		"id": 9,
		"nickname": "Marcos.Bradtke10",
		"isAdmin": true,
		"xp": 233,
		"createdAt": "2024-05-18T02:53:43.000Z",
		"updatedAt": "2024-05-18T02:53:43.000Z",
		"selectedAvatar": {
			"url": "http://localhost:3000/images/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
			"id": 3
		},
		"photos": [
			{
				"url": "http://localhost:3000/photos/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
				"id": 25
			}
		],
		"avatars": [
			{
				"url": "http://localhost:3000/images/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
				"id": 1
			},
      {
				"url": "http://localhost:3000/images/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
				"id": 3
			},
		]
	},
	{
		"id": 10,
		"nickname": "Bart.Hahn",
		"isAdmin": false,
		"xp": 713,
		"createdAt": "2024-05-18T02:53:43.000Z",
		"updatedAt": "2024-05-18T02:53:43.000Z",
		"selectedAvatar": {
			"url": "http://localhost:3000/images/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
			"id": 1
		},
		"photos": [
			{
				"url": "http://localhost:3000/photos/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
				"id": 99
			},
			{
				"url": "http://localhost:3000/photos/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
				"id": 100
			}
		],
		"avatars": [
      {
				"url": "http://localhost:3000/images/475deead-8d3d-4dbe-9345-03226ae6ed21.png",
				"id": 1
			},
    ]
	}, ...
]

* GET /users/user
- carregar os dados do usuário autenticado, incluindo o seu avatar selecionado
- autenticação necessária
- {
	"id": 51,
	"nickname": "augusto",
	"isAdmin": false,
	"password": "$2a$10$ytNx79zq05c7G35rX6l/n.otw9gxE5VloWfApyWF.bnahKf9ksT.G",
	"xp": 100,
	"createdAt": "2024-05-18T02:54:05.000Z",
	"updatedAt": "2024-05-18T02:54:05.000Z",
	"selectedAvatar": {
		"url": "http://localhost:3000/images/undefined",
		"id": 1
	}
}

* POST /users
- criar um novo usuário.
- autenticação necessária
- nickname (UK string), ?selectedAvatarId (FK from avatars id), ?isAdmin (boolean), ?xp (integer), password (string)
- {
	"id": 51,
	"nickname": "augusto3",
	"isAdmin": false,
	"selectedAvatarId": 1,
	"password": "$2a$10$1z8kXeqHCKkNMGm8sOL2heLth1BudRpha3.B8E51qr0pPw5Ya3fCa",
	"xp": "100",
	"updatedAt": "2024-05-29T00:03:59.208Z",
	"createdAt": "2024-05-29T00:03:59.208Z"
}

* PUT /users
- atualizar dados do usuário autenticado
- autenticação necessária
- nickname (UK string), ?selectedAvatarId (FK from avatars id), ?isAdmin (boolean), ?xp (integer) password (string)
- {
	"id": 51,
	"nickname": "augusto3",
	"isAdmin": false,
	"password": "$2a$10$4HqJ0NRDs36/7uE99PmOeu/kNN9DwOnjNBs5qoHbd965ArUivVAqm",
	"xp": 100,
	"createdAt": "2024-05-29T00:03:59.000Z",
	"updatedAt": "2024-05-29T00:03:59.000Z",
	"selectedAvatar": {
		"url": "http://localhost:3000/images/undefined",
		"id": 1
	}
}

* DELETE /users
- deletar um usuário
- autenticação necessária
- {
	"id": 51,
	"nickname": "augusto3",
	"isAdmin": false,
	"password": "$2a$10$1z8kXeqHCKkNMGm8sOL2heLth1BudRpha3.B8E51qr0pPw5Ya3fCa",
	"xp": 100,
	"createdAt": "2024-05-29T00:03:59.000Z",
	"updatedAt": "2024-05-29T00:03:59.000Z",
	"selectedAvatar": {
		"url": "http://localhost:3000/images/undefined",
		"id": 1
	}
}

-- tokens

* POST /tokens
- criar um jwt token.
- nickname (string), password (string) - referentes a um usuário já armazenado.
- {
	"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NTEsImlhdCI6MTcxNjA2OTQzNywiZXhwIjoxNzE2Njc0MjM3fQ.OrajG2_hn0iLNfYi6aKNp6D9DJX_qcLBRcnD47HEj40"
}

================================================================================================================================================================



PROJECT TECHNOLOGIES:

-- Production dependencies:

* express
- It's a minimal and flexible Node.js web application framework that provides a robust set of features for
building web and mobile applications. It facilitates the development of APIs and web servers in Node.js.

* sequelize
- It's a promise-based Node.js ORM for Postgres, MySQL, MariaDB, SQLite, and Microsoft SQL Server.
It features solid transaction support, relations, eager and lazy loading, read replication, and more.

* bcryptjs
- It's a library to help hash passwords securely. It's a JavaScript implementation of the bcrypt password hashing function.

* cors
- It's a Node.js package that enables Cross-Origin Resource Sharing (CORS) for Express.js.
It allows you to control how your server handles cross-origin requests.

* dotenv
- It's a zero-dependency module that loads environment variables from a .env file into process.env.
Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.

* express-validator
- It's a set of express.js middleware for input validation and sanitization.
It is based on validator.js and is heavily inspired by Laravel's validation syntax.

* helmet
- It's a collection of 14 smaller middleware functions that set HTTP headers
to secure Express/Connect apps by setting various HTTP headers.

* jsonwebtoken
- It's an implementation of JSON Web Tokens (JWT) to enable stateless authentication.
It is used to create and verify tokens in Node.js.

* multer
- It's a middleware for handling multipart/form-data, which is primarily used for
uploading files. It integrates seamlessly with Express.

* lodash
- It's a modern JavaScript utility library delivering modularity, performance & extras.
It provides utility functions for common programming tasks.

* mariadb
- It's a MySQL-compatible relational database management system made by the original
developers of MySQL. It's designed as a drop-in replacement for MySQL.

* pino
- It's a logger for Node.js with extremely low overhead. It also provides a pretty-printer
to format logs for better readability during development.

* query-string
- It's a library to parse and stringify URL query strings. It provides a simple way to handle
query parameters in the browser and Node.js.

* stack-trace
- It's a utility to generate stack traces in Node.js.

* uuid
- It's a library to generate RFC compliant UUIDs.

* zod
- It's a TypeScript-first schema declaration and validation library.
It is designed to be lightweight and very fast.

================================================================================================================================================================



-- Development dependencies:

* eslint
- It's a static code analysis tool for identifying problematic patterns in JavaScript code. It's
highly configurable and widely used for enforcing coding styles and catching common programming errors.

* eslint-config-airbnb-base
- I's a set of ESLint rules based on Airbnb's style guide. It provides
a solid foundation for JavaScript projects, ensuring consistency and readability across codebases.

* eslint-config-prettier
- It disables ESLint rules that may conflict with Prettier, a code formatter. It allows Prettier to format code without interference from other ESLint rules.

* eslint-plugin-import
- It's an ESLint plugin that provides linting rules for import/export syntax, path resolution, and module loading.

* nodemon
- It's a utility that monitors for changes in Node.js applications and automatically restarts the server when files are modified. It's commonly used during development to streamline the development workflow.

* pino-pretty
- I's a utility for formatting Pino logs in a human-readable format. It enhances the readability of log messages during development.

* prettier
- It's an opinionated code formatter that supports various languages, including JavaScript. It enforces a consistent code style by parsing code and re-printing it with its own rules.

* sequelize-cli
- It's the Command Line Interface for Sequelize, an ORM for Node.js. It provides commands for managing database migrations, seeds, and generating models and migration files.

* sucrase
- It's a super-fast Babel alternative that makes development with modern JavaScript syntax more efficient. It allows developers to use features like import/export syntax without the need for transpilation in development environments.

================================================================================================================================================================



DIRECTORY STRUCTURE:

+---src
    +---config
    +---controllers
    +---database
        +---migrations
        +---seeds
    +---docs
    +---logging
    +---middlewares
    +---models
    +---routes
    +---validation
        +---errors
            +---classes
    +---uploads
        +---images


* `src/config` - Contains all the configuration files for the application (files like database config).

* `src/controllers` - Contains all the controllers (files for handling the data provided by the request,

applying some validations and providing a response to the client) for the application.

* `src/database` - Contains all the database files for the application.
    * `src/database/migrations` - Contains all the migration files for the application (files for easily management and set of the database schema).
    * `src/database/seeds` - Contains all the seed files for the application (files for easily creation of database mock data).

* `src/docs` - Contains all the documentation files for the application (docs like the database description).

* `src/logging` - Contains all the logging files for the application (useful for improving debugging and analysis of the api consuming).

* `src/middlewares` - Contains all the middleware files for the application (files for handling request data before it reaches the controller).

* `src/models` - Contains all the models files for the application (files for handling data from database tables).

* `src/routes` - Contains all the routes files for the application (files for handling the routing logic: when a GET request reaches '/users', what should be done?).

* `src/validation` - Contains all the validation files for the application (files containing validations, like if a row in a certain table exists in the database).
    * `src/validation/errors` - Contains all the error objects bases (used when creating and throwing api errors).
        * `src/validation/errors/classes` - Contains all the error-related classes from the api (like Base, which is used in the api error base objects).

* `src/uploads` - Contains all the uploaded files for the application.
    * `src/uploads/images` - Contains all the uploaded images for the application (like the users photos).
