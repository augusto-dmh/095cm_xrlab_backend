HOW TO SET THE API:

1 - Clone the repository located at https://github.com/augusto-dmh/conexao095_xrlab_backend

2 - Create the MYSQL database (execute each of the commands from top to bottom).

2 - Run “npm install” to install the project dependencies.

3 - Create a .env file at the root of the application containing the following items:

NODE_ENV=development LOG_LEVEL=info
DATABASE=your_database_name (e.g., conexao095)
DATABASE_HOST=ip_where_your_db_is_hosted (e.g., 127.0.0.1)
DATABASE_PORT=port_where_your_db_is_hosted (e.g., 3306)
DATABASE_USERNAME=your_db_user (e.g., root)
DATABASE_PASSWORD=db_password (e.g., kaksjdajskdsakldj)
TOKEN_SECRET=random_and_strong_character_sequence (e.g., &ds7a89duj9jdsads8790ad&AD)(AD) TOKEN_EXPIRATION=how_long_the_authentication_token_takes_to_expire (e.g., 7d, 1y, 1h…)
APP_URL=url_where_the_application_is_accessible_on_the_web (e.g., http://localhost:3000)
APP_PORT=port_where_the_application_listens_for_requests (e.g., 3000)

4 - In api/src/app.js, in the following instruction:

const whitelist = [];
Add within the array a string containing the URL where the frontend is hosted (e.g., https://localhost:5173)

5 - Run ‘npm run dev’ at the root of the project.



ENDPOINTS:

* HTTP METHOD [path]
- motivo de existir
- dados que devem ou podem estar no body (se for necessário um body)
- exige ou não login


-- photos

* GET /photos
- carregar todas as fotos da aplicação
- sem body.
- não exige

* POST /photos
- upload de photos
- latitude (number), longitude (number), photo (file (.png or jpg))
- exige


-- users

* GET /users
- carregar todos os usuários da aplicação (incluindo dados relacionados (não registros de uma tabela, mas resultados de joins e subqueries), como o avatar selecionado e os avatares disponíveis para cada um deles)
- sem body
- não exige

* GET /users/user
- carregar os dados de um usuário (incluindo dados relacionados ``)
- sem body
- exige

* POST /users
- criar um novo usuário.
- deve conter id (integer), nickname (string), selected_avatar (integer), isAdmin (boolean), password (string)
- exige

* PUT /users
- atualizar dados de um usuário
- pode conter id (integer), nickname (string), selected_avatar (integer), isAdmin (boolean), password (string)
- exige

* DELETE /users
- deletar um usuário
- sem body
- exige

-- tokens

* POST /tokens
- criar um jwt token.
- deve conter nickname (string) e password (string) referente a um usuário da aplicação.
- não exige



PROJECT TECHNOLOGIES:

-- Production dependencies:

* express
- It's a minimal and flexible Node.js web application framework that provides a robust set of features for
building web and mobile applications. It facilitates the development of APIs and web servers in Node.js.

* sequelize
- It's a promise-based Node.js ORM for Postgres, MySQL, MariaDB, SQLite, and Microsoft SQL Server.
It features solid transaction support, relations, eager and lazy loading, read replication, and more.

* bcryptjs
- It's a library to help hash passwords securely. It's a JavaScript implementation of the bcrypt password hashing function.

* cors
- It's a Node.js package that enables Cross-Origin Resource Sharing (CORS) for Express.js.
It allows you to control how your server handles cross-origin requests.

* dotenv
- It's a zero-dependency module that loads environment variables from a .env file into process.env.
Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.

* express-validator
- It's a set of express.js middleware for input validation and sanitization.
It is based on validator.js and is heavily inspired by Laravel's validation syntax.

* helmet
- It's a collection of 14 smaller middleware functions that set HTTP headers
to secure Express/Connect apps by setting various HTTP headers.

* jsonwebtoken
- It's an implementation of JSON Web Tokens (JWT) to enable stateless authentication.
It is used to create and verify tokens in Node.js.

* multer
- It's a middleware for handling multipart/form-data, which is primarily used for
uploading files. It integrates seamlessly with Express.

* lodash
- It's a modern JavaScript utility library delivering modularity, performance & extras.
It provides utility functions for common programming tasks.

* mariadb
- It's a MySQL-compatible relational database management system made by the original
developers of MySQL. It's designed as a drop-in replacement for MySQL.

* pino
- It's a logger for Node.js with extremely low overhead. It also provides a pretty-printer
to format logs for better readability during development.

* query-string
- It's a library to parse and stringify URL query strings. It provides a simple way to handle
query parameters in the browser and Node.js.

* stack-trace
- It's a utility to generate stack traces in Node.js.

* uuid
- It's a library to generate RFC compliant UUIDs.

* zod
- It's a TypeScript-first schema declaration and validation library.
It is designed to be lightweight and very fast.


-- Development dependencies:

* eslint
- It's a static code analysis tool for identifying problematic patterns in JavaScript code. It's
highly configurable and widely used for enforcing coding styles and catching common programming errors.

* eslint-config-airbnb-base
- I's a set of ESLint rules based on Airbnb's style guide. It provides
a solid foundation for JavaScript projects, ensuring consistency and readability across codebases.

* eslint-config-prettier
- It disables ESLint rules that may conflict with Prettier, a code formatter. It allows Prettier to format code without interference from other ESLint rules.

* eslint-plugin-import
- It's an ESLint plugin that provides linting rules for import/export syntax, path resolution, and module loading.

* nodemon
- It's a utility that monitors for changes in Node.js applications and automatically restarts the server when files are modified. It's commonly used during development to streamline the development workflow.

* pino-pretty
- I's a utility for formatting Pino logs in a human-readable format. It enhances the readability of log messages during development.

* prettier
- It's an opinionated code formatter that supports various languages, including JavaScript. It enforces a consistent code style by parsing code and re-printing it with its own rules.

* sequelize-cli
- It's the Command Line Interface for Sequelize, an ORM for Node.js. It provides commands for managing database migrations, seeds, and generating models and migration files.

* sucrase
- It's a super-fast Babel alternative that makes development with modern JavaScript syntax more efficient. It allows developers to use features like import/export syntax without the need for transpilation in development environments.
